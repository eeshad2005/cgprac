#include <GL/glut.h>
#include <iostream>

int algo; float R=1, G=0, B=0;

void put(int x, int y) {
    glBegin(GL_POINTS); glColor3f(R,G,B); glVertex2i(x,y); glEnd(); glFlush();
}

void get(int x, int y, float* c) {
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, c);
}

void flood(int x, int y, float* old) {
    float now[3]; get(x, y, now);
    if (now[0]==old[0] && now[1]==old[1] && now[2]==old[2]) {
        put(x,y);
        flood(x+1,y,old); flood(x-1,y,old); flood(x,y+1,old); flood(x,y-1,old);
    }
}

void boundary(int x, int y, float* border) {
    float now[3]; get(x,y,now);
    if ((now[0]!=border[0] || now[1]!=border[1] || now[2]!=border[2]) &&
        (now[0]!=R || now[1]!=G || now[2]!=B)) {
        put(x,y);
        boundary(x+1,y,border); boundary(x-1,y,border);
        boundary(x,y+1,border); boundary(x,y-1,border);
    }
}

void mouse(int b, int s, int x, int y) {
    if (b==GLUT_LEFT_BUTTON && s==GLUT_DOWN) {
        y = 480 - y;
        float white[] = {1,1,1}, red[] = {1,0,0};
        (algo==1) ? boundary(x,y,red) : flood(x,y,white);
    }
}

void draw() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1,0,0);  // Red color for the shape

    // Triangle (Uncomment this block for triangle)
    /*
    glBegin(GL_LINE_LOOP);
    glVertex2i(200, 100);  // Bottom-left corner
    glVertex2i(300, 300);  // Top corner
    glVertex2i(400, 100);  // Bottom-right corner
    glEnd(); 
    */

    // Square (Uncomment this block for square)
    /*
    glBegin(GL_LINE_LOOP);
    glVertex2i(200, 100);  // Bottom-left corner
    glVertex2i(200, 300);  // Top-left corner
    glVertex2i(400, 300);  // Top-right corner
    glVertex2i(400, 100);  // Bottom-right corner
    glEnd(); 
    */

    // Rectangle
    glBegin(GL_LINE_LOOP);
    glVertex2i(150, 100);  // Bottom-left corner
    glVertex2i(150, 300);  // Top-left corner
    glVertex2i(500, 300);  // Top-right corner
    glVertex2i(500, 100);  // Bottom-right corner
    glEnd(); 
    glFlush();
}

void menu(int v) {
    if(v==1) R=0,G=1,B=0;  // Green
    if(v==2) R=1,G=1,B=0;  // Yellow
    if(v==3) R=1,G=0,B=1;  // Pink
}

void init() {
    glClearColor(1,1,1,1);  // Set background to white
    gluOrtho2D(0,640,0,480);  // Set 2D projection
}

int main(int a, char** b) {
    printf("1 = Boundary, 2 = Flood: "); std::cin >> algo;
    glutInit(&a,b);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowSize(640,480);
    glutCreateWindow("Fill Shapes");
    init();
    glutDisplayFunc(draw);
    glutMouseFunc(mouse);
    glutCreateMenu(menu);
    glutAddMenuEntry("Green",1); glutAddMenuEntry("Yellow",2); glutAddMenuEntry("Pink",3);
    glutAttachMenu(GLUT_RIGHT_BUTTON);
    glutMainLoop();
}


/*

If you are asked any change in the shape during the mock 
just change the draw function , that's it , and chill out fam 

*/